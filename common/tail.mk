# Toolchain
CC  = @arm-none-eabi-gcc
HEX = @arm-none-eabi-objcopy
SZ  = @arm-none-eabi-size

RM=rm -rf

# Global Variables
DEBUG ?= 0 # Default to non debug
BIN_DIR_NAME = Bin

ELF_FILE_NAME = $(BOARD_NAME).elf
BIN_FILE_NAME = $(BOARD_NAME).bin
MAP_FILE_NAME = $(BOARD_NAME).map

ifeq ($(DEBUG), 1)
BIN_DIR = $(BIN_DIR_NAME)/$(BOARD_NAME)/Debug
else
BIN_DIR = $(BIN_DIR_NAME)/$(BOARD_NAME)/Release
endif

BIN_FILE = $(BIN_DIR)/$(BIN_FILE_NAME)
ELF_FILE = $(BIN_DIR)/$(ELF_FILE_NAME)
MAP_FILE = $(BIN_DIR)/$(MAP_FILE_NAME)

SRC_DIR = $(BUILD_TARGET)/Src
COMMON_LIB_DIR = common/
COMMON_F7_LIB_DIR = $(COMMON_LIB_DIR)/f7
COMMON_F0_LIB_DIR = $(COMMON_LIB_DIR)/f0
GITHOOKS_DIR = $(COMMON_LIB_DIR)/.githooks


GEN_DIR = Gen
GEN_BOARD_DIR = $(GEN_DIR)/$(BOARD_NAME)
GEN_INC_DIR = $(GEN_BOARD_DIR)/Inc
GEN_SRC_DIR = $(GEN_BOARD_DIR)/Src
SCRIPTS_DIR = $(COMMON_LIB_DIR)/Scripts
CAN_FILES_GEN_SCRIPT = $(SCRIPTS_DIR)/generateCANHeadder.py
DTC_FILES_GEN_SCRIPT = $(SCRIPTS_DIR)/generateDTC.py

CURRENT_DATE = \"$(shell date +%F_%T%Z)\"
CURRENT_TOP_BRANCH = \"$(shell git rev-parse --abbrev-ref HEAD)\"
CURRENT_HASH = \"$(shell git rev-parse HEAD)\"


COMMON_LIB_DATA_DIR = $(COMMON_LIB_DIR)/Data
DTC_CSV_FILE = $(COMMON_LIB_DATA_DIR)/dtc.csv
DBC_FILE = $(COMMON_LIB_DATA_DIR)/2024CAR.dbc

COLORS_ENABLED ?= 1
ifeq ($(COLORS_ENABLED), 1)
GREEN_COLOR = "\\033[92m"
BLUE_COLOR = "\\033[34m"
RED_COLOR = "\\033[91m"
NO_COLOR = "\\033[0m"
endif

# Test variables
TEST_DIR = unit-tests/$(COMMON_LIB_DIR)/
TEST_BUILD_DIR = unit-tests/$(COMMON_LIB_DIR)/build
TEST_TARGETS := bmu dcu pdu vcu
TEST_TARGET ?= none

# Linter variables
LINT_DIR = Lint
LINT_TARGETS := common bmu pdu dcu vcu wsb
LINT_TARGET ?= none
RUN_CPPCHECK = cppcheck --addon=./common/Misra/misra.json --inline-suppr --enable=all  -I $(LINT_TARGET)/Inc --output-file=$(LINT_DIR)/$(LINT_TARGET)-lint.log $(LINT_TARGET)/Src
DELETE_CTU_FILES = find ./$(LINT_TARGET)/Src/ -type f \( -name "*.ctu-info" -or -name "cppcheck-addon-ctu-file-list" -or -name "*.dump" \) -delete
RUN_LINTER = $(RUN_CPPCHECK); $(DELETE_CTU_FILES);


# Include STM32CubeMX autogenerated Makefile
ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F7)
	include $(CUBE_NUCLEO_F7_MAKEFILE_PATH)/Cube-Lib.mk
else ifeq ($(BOARD_ARCHITECTURE), F7)
	include $(CUBE_F7_MAKEFILE_PATH)/Cube-Lib.mk
else ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F0)
	include $(CUBE_NUCLEO_F0_MAKEFILE_PATH)/Cube-Lib.mk
else ifeq ($(BOARD_ARCHITECTURE), F0)
	include $(CUBE_F0_MAKEFILE_PATH)/Cube-Lib.mk
else
    $(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

DEPDIR_BASE := .d
DEPDIR := $(DEPDIR_BASE)/$(BOARD_NAME)
$(shell mkdir -p $(DEPDIR) >/dev/null)
DEPFLAGS = -MT $@ -MMD -MP -MF $(BOARD_DEPDIR)/$*.Td

# Setup includes: flags, dirs
INCLUDE_DIRS = $(COMMON_LIB_DIR)/Inc \
			  $(COMMON_F7_LIB_DIR)/Inc \
			  $(COMMON_F0_LIB_DIR)/Inc \
			  $(BUILD_TARGET)/Inc \
			  $(F7_INC_DIR) \
			  $(GEN_INC_DIR)


INCLUDE_FLAGS := $(addprefix -I,$(INCLUDE_DIRS))
# add in driver dirs
INCLUDE_FLAGS += $(LIB_C_INCLUDES)
INCLUDE_FLAGS += $(LIB_AS_INCLUDES)

# Setup System defines
ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F7 F7))
DEFINES := "STM32F767xx"
else ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F0 F0))
DEFINES := "STM32F072xB"
else
	$(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

DEFINES += BOARD_NAME=$(BOARD_NAME) BOARD_NAME_UPPER=$(BOARD_NAME_UPPER) BOARD_ID=ID_$(BOARD_NAME_UPPER) BOARD_TYPE=$(BOARD_ARCHITECTURE) BOARD_TYPE_$(BOARD_ARCHITECTURE)=1 "USE_HAL_DRIVER"
DEFINE_FLAGS := $(addprefix -D,$(DEFINES))

# Setup Linker Flags
LINKER_FLAGS =$(LIB_LDFLAGS)
LINKER_FLAGS += -Wl,-Map=$(MAP_FILE),--cref
LINKER_FLAGS += -u_printf_float -u_scanf_float
LINKER_FLAGS += -Wl,--undefined=uxTopUsedPriority
LINKER_FLAGS += -z muldefs

# Assembler Flags
ASSEMBLER_FLAGS = -x assembler-with-cpp $(LIB_ASFLAGS)

NOTES ?= "N/A"
# Compiler Flags
COMPILER_FLAGS = $(LIB_CFLAGS)
COMPILER_FLAGS += $(DEFINE_FLAGS) -Werror
COMPILER_FLAGS += -D CUR_DATE=$(CURRENT_DATE)
COMPILER_FLAGS += -D CUR_TOP_BRANCH=$(CURRENT_TOP_BRANCH)
COMPILER_FLAGS += -D CUR_HASH=$(CURRENT_HASH)
COMPILER_FLAGS += -D RELEASE_NOTES=\"$(NOTES)\"
ifeq ($(DEBUG), 1)
COMPILER_FLAGS += -g -Og
else
COMPILER_FLAGS += -g -O2
endif

POSTCOMPILE = @mv -f $(BOARD_DEPDIR)/$*.Td $(BOARD_DEPDIR)/$*.d && touch $@


# Setup Src *.c, *.asm files to build
SRC = $(wildcard $(SRC_DIR)/*.c) \
	   $(addprefix $(COMMON_LIB_DIR)/Src/, $(COMMON_LIB_SRC)) \
	   $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c \
	   $(LIB_C_SOURCES)

SRCASM = $(LIB_ASM_SOURCES)

ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F7 F7))
   SRC += $(addprefix $(COMMON_F7_LIB_DIR)/Src/, $(COMMON_F7_LIB_SRC))
else ifeq ($(BOARD_TYPE), $(filter $(BOARD_TYPE), NUCLEO_F0 F0))
   SRC += $(addprefix $(COMMON_F0_LIB_DIR)/Src/, $(COMMON_F0_LIB_SRC))
else
	$(error "Unsupported Board type: $(BOARD_TYPE)")
endif

ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F7)
   SRC += $(addprefix $(NUCLEO_F7_SRC_DIR)/, $(NUCLEO_F7_SRC))
else ifeq ($(BOARD_ARCHITECTURE), F7)
   SRC += $(addprefix $(F7_SRC_DIR)/, $(F7_SRC))
else ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F0)
   SRC += $(addprefix $(NUCLEO_F0_SRC_DIR)/, $(NUCLEO_F0_SRC))
else ifeq ($(BOARD_ARCHITECTURE), F0)
   SRC += $(addprefix $(F0_SRC_DIR)/, $(F0_SRC))
else
	$(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

ifeq ($(BOARD_NAME), bmu)
   SRC += $(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c
endif

######################################
# Autogenerated code dependency files
######################################
GEN_FILES = $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c \
	    $(GEN_INC_DIR)/$(BOARD_NAME)_can.h \
	    $(GEN_INC_DIR)/$(BOARD_NAME)_dtc.h

ifeq ($(BOARD_NAME), bmu)
   GEN_FILES += $(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c
   GEN_FILES += $(GEN_INC_DIR)/$(BOARD_NAME)_charger_can.h
endif



# Board Build

ifneq ($(BOARD_NAME), $(BUILD_TARGET))
$(BUILD_TARGET): $(BOARD_NAME)
endif

$(BOARD_NAME): BOARD_COMPILER_FLAGS := $(COMPILER_FLAGS)
$(BOARD_NAME): BOARD_INCLUDE_FLAGS := $(INCLUDE_FLAGS)
$(BOARD_NAME): BOARD_ASSEMBLER_FLAGS := $(ASSEMBLER_FLAGS)
$(BOARD_NAME): BOARD_POSTCOMPILE = $(POSTCOMPILE)
$(BOARD_NAME): BOARD_LINKER_FLAGS := $(LINKER_FLAGS)
$(BOARD_NAME): BOARD_DEPDIR := $(DEPDIR)
$(BOARD_NAME): CURR_BOARD := $(BOARD_NAME)

$(BOARD_NAME): BOARD_BIN_FILE := $(BIN_FILE)

$(BOARD_NAME): $(BOARD_NAME)_pre-build $(BIN_FILE)
	@echo -e "$(GREEN_COLOR)Completed Build $(CURR_BOARD) $(NO_COLOR)"

RELEASE_OBJS = $(SRC:%.c=$(BIN_DIR)/%.o) $(SRCASM:%.s=$(BIN_DIR)/%.o)

$(BIN_FILE): $(ELF_FILE)
	$(HEX) -O binary "$<" "$@"

$(ELF_FILE): $(RELEASE_OBJS)
	$(CC) $^ $(BOARD_LINKER_FLAGS) -o $@
	$(SZ) $@



$(RELEASE_OBJS): | $(GEN_FILES)

# Build each object file
$(BIN_DIR)/%.o: %.c
	@mkdir -p $(dir $@)
	@mkdir -p $(dir $(BOARD_DEPDIR)/$^)
	$(CC) $(BOARD_COMPILER_FLAGS) $(BOARD_INCLUDE_FLAGS) $(DEPFLAGS) $< -o $@
	$(BOARD_POSTCOMPILE)

$(BIN_DIR)/%.o: %.s
	@mkdir -p $(dir $@)
	$(CC) $(BOARD_ASSEMBLER_FLAGS) $(BOARD_INCLUDE_FLAGS) $< -o $@

$(BIN_DIR)/%.o: %.S
	@mkdir -p $(dir $@)
	$(CC) $(BOARD_ASSEMBLER_FLAGS) $(BOARD_INCLUDE_FLAGS) $< -o $@

######################################
# Created autogenerated files
#######################################

ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F7 F7))
F0_OR_F7 := "F7"
else ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F0 F0))
F0_OR_F7 := "F0"
else
	$(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

autogen: $(GEN_FILES)

$(GEN_INC_DIR)/$(BOARD_NAME)_can.h: $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c

$(GEN_SRC_DIR)/$(BOARD_NAME)_can.c: BOARD_F0_OR_F7 := $(F0_OR_F7)
$(GEN_SRC_DIR)/$(BOARD_NAME)_can.c: $(CAN_FILES_GEN_SCRIPT) $(DBC_FILE)
	@mkdir -p $(GEN_DIR)
	@$(CAN_FILES_GEN_SCRIPT) $(CURR_BOARD) $(BOARD_F0_OR_F7)

$(GEN_INC_DIR)/$(BOARD_NAME)_charger_can.h: $(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c

$(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c: $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c

$(GEN_INC_DIR)/$(BOARD_NAME)_dtc.h: $(DTC_FILES_GEN_SCRIPT) $(DTC_FILE)
	@mkdir -p $(GEN_DIR)
	@$(DTC_FILES_GEN_SCRIPT) $(CURR_BOARD)

#$(DEPDIR)/%.d: ;
.PRECIOUS: $(DEPDIR)/%.d

$(BOARD_NAME)_pre-build:
	@echo -e "$(BLUE_COLOR)Building Board: $(RED_COLOR)$(CURR_BOARD) $(NO_COLOR)"

ifndef BUILD_ONLY_ONCE

clean:
	$(RM) $(BIN_DIR_NAME)
	$(RM) $(DEPDIR_BASE)
	$(RM) $(GEN_DIR)
	$(RM) $(TEST_BUILD_DIR)
	@$(foreach LINT_TARGET, $(LINT_TARGETS), $(DELETE_CTU_FILES);)

#
# Initialization 
#
init:
	git config core.hooksPath $(GITHOOKS_DIR)
	git submodule init
	git submodule update

test:
ifneq ($(filter $(TEST_TARGET), $(TEST_TARGETS)),)
	@echo "Unit testing on: $(TEST_TARGET)"
	@make $(TEST_TARGET)
	@make -C $(TEST_DIR) $(TEST_TARGET)
else
	@echo "Unit testing on: $(TEST_TARGETS)"
	@make $(TEST_TARGETS)
	@make -C $(TEST_DIR) $(TEST_TARGETS)
endif

lint:
	@mkdir -p $(LINT_DIR)
ifneq ($(filter $(LINT_TARGET), $(LINT_TARGETS)),)
	@echo "Running linter on: $(LINT_TARGET)"
	@$(RUN_LINTER)
else
	@echo "Running linter on: $(LINT_TARGETS)"
	@$(foreach LINT_TARGET, $(LINT_TARGETS), $(RUN_LINTER))
endif

BUILD_ONLY_ONCE = 1

endif


ifneq (,$(filter $(LOAD_TARGET), $(BOARD_NAME) $(BUILD_TARGET)))
LOAD_BOARD_ARCH := $(BOARD_ARCHITECTURE)
ifeq ($(LOAD_BOARD_ARCH), $(filter $(LOAD_BOARD_ARCH), NUCLEO_F7 F7))
   OPENOCD_FILE := target/stm32f7x.cfg
else ifeq ($(LOAD_BOARD_ARCH), $(filter $(LOAD_BOARD_ARCH), NUCLEO_F0 F0))
   OPENOCD_FILE := target/stm32f0x.cfg
else
	$(error "Unsupported Board type: $(BOARD_TYPE)")
endif

LOAD_BIN_FILE := $(BIN_FILE)
LOAD_ELF_FILE := $(ELF_FILE)


load: $(BOARD_NAME)
	openocd -f interface/stlink-v2-1.cfg -f $(OPENOCD_FILE) -c init -c "reset halt" -c halt -c "flash write_image erase $(LOAD_BIN_FILE) 0x8000000" -c "verify_image $(LOAD_BIN_FILE) 0x8000000" -c "reset run" -c shutdown

# Use this if you want gdb to be rtos thread aware
connect-rtos: 
	openocd -f interface/stlink-v2-1.cfg -f $(OPENOCD_FILE) -c "stm32f7x.cpu configure -rtos FreeRTOS" -c init -c "reset halt" -c halt

# use this to debug stuff before rtos starts

connect: load
	openocd -f interface/stlink-v2-1.cfg -f $(OPENOCD_FILE) -c init -c "reset halt" -c halt

gdb: 
	gdb-multiarch --eval-command="target remote localhost:3333" --eval-command="monitor reset halt" $(LOAD_ELF_FILE)

endif # LOAD_TARGET == BUILD_TARGET

#
# Include dependencies
#
include $(wildcard $(patsubst %,$(DEPDIR)/%.d, $(basename $(SRC))))
include $(shell mkdir -p Gen) $(wildcard Gen/*.d)
