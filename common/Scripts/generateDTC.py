#!/usr/bin/env python3

import csv
import os
import sys
import errno

commonDir = 'common'

ScriptsDir = os.path.join(commonDir, 'Scripts')

genDir = 'Gen'

depFile = os.path.join(genDir, 'dtc.d')

dtcFile = os.path.join(commonDir, 'Data/DTC.csv')

dtcSeverityNames = ['INVALID_SEVERITY', 'FATAL', 'CRITICAL', 'ERROR', 'WARNING']

def fWrite(string, fileHandle):
    fileHandle.write(string + '\n')

def createDir(directory):
    try:
        os.makedirs(directory)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(directory):
            pass
        else:
            raise

def generateHeaderFilePreamble(headerFileHandle, includeGuardMacroName):
    fWrite('#ifndef ' + includeGuardMacroName, headerFileHandle)
    fWrite('#define ' + includeGuardMacroName, headerFileHandle)
    fWrite('// This is an autogenerated file, do not change manually. Modify {dtcFile} instead\n'.format(dtcFile=dtcFile), headerFileHandle)
    fWrite('#include "userCan.h"', headerFileHandle)

def generateHeaderFileTail(headerFileHandle, includeGuardMacroName):
    fWrite('', headerFileHandle)
    fWrite('#endif /* defined(' + includeGuardMacroName + ') */', headerFileHandle)

def generateErrorMacro(headerFileHandle, dtcName, dtcData, dtcCode, dtcSeverity):
    severityName = dtcSeverityNames[int(dtcSeverity)]
    if (int(dtcSeverity) >= 1 and int(dtcSeverity) <= 4):
        macro = '#define '
        macro += 'sendDTC_{severityName}_{dtcName}'.format(**locals())
        # macro += 'sendDTC_' + dtcSeverityNames[severity] + '_' + dtcName
        if dtcData != 'NA':
            macro += '({dtcData})'.format(**locals())
        else:
            macro += '()'


        macro += ' sendDTCMessage({dtcCode}, {dtcSeverity}'.format(**locals())

        # If there is data, send it, otherwise just send 0 for that field
        if dtcData != 'NA':
            macro += ', {dtcData}'.format(**locals())
        else:
            macro += ', 0'
        macro += ')'

        fWrite(macro, headerFileHandle)
    else:
        print("Invalid severity {} for dtc {}".format(severity, dtcName))
        sys.exit(1)

def generateDependencyFile(headerFile, target):
    with open(depFile, 'w') as depFileHandle:
        fWrite('{headerFile}: {dir}/generateDTC.py {dtcFile}'.format(headerFile=headerFile, dtcFile=dtcFile, dir=ScriptsDir), depFileHandle)
        fWrite('	{dir}/generateDTC.py {target}'.format(target=target, dir=ScriptsDir), depFileHandle)

def generateEnum(headerFileHandle, dtcCodeToName):
    fWrite('\ntypedef enum DtcNames_t\n{', headerFileHandle)

    for code in dtcCodeToName:
        name = dtcCodeToName[code]['name']
        msg = dtcCodeToName[code]['message']
        severity = dtcSeverityNames[int(dtcCodeToName[code]['severity'])]
        fWrite('    {severity}_{name} = {code}, // {msg}'.format(**locals()), headerFileHandle)

    fWrite('} dtcNames;', headerFileHandle)

def generateSeveritiesEnum(headerFileHandle):
    fWrite('typedef enum DtcSeverities_t\n{', headerFileHandle)

    for idx, name in enumerate(dtcSeverityNames):
        fWrite('DTC_Severity_{name} = {idx},'.format(name=name, idx=idx), headerFileHandle)

    fWrite('} DtcSeverities_t;', headerFileHandle)

def main(argv):
    createDir(genDir)

    if argv and len(argv) == 1:
        target = argv[0]
        genIncDir = os.path.join(genDir, target, 'Inc')
        createDir(genIncDir)
        headerFile = genIncDir + '/' + target + '_dtc.h'
        includeGuardMacroName = '__' + target + '_DTC_H'
    else:
        print('Error: no target specified')
        sys.exit(1)

    dtcFileHandle = open(dtcFile, 'r')
    headerFileHandle = open(headerFile, 'w')

    dtcReader = csv.DictReader(dtcFileHandle, skipinitialspace=True)

    generateHeaderFilePreamble(headerFileHandle, includeGuardMacroName)

    dtcCodeToName = {}
    for row in dtcReader:
        dtcCodeToName[row['DTC CODE']] = {'name':row['NAME'], 'message':row['MESSAGE'], 'severity':row['SEVERITY']}
        origins = row['ORIGIN'].split(',')
        if (target.upper() in origins):
            generateErrorMacro(headerFileHandle, row['NAME'], row['DATA'], row['DTC CODE'], row['SEVERITY'])

    generateEnum(headerFileHandle, dtcCodeToName)
    generateSeveritiesEnum(headerFileHandle)

    generateHeaderFileTail(headerFileHandle, includeGuardMacroName)

    headerFileHandle.close()

    #generateDependencyFile(headerFile, target)

if __name__ == '__main__':
    main(sys.argv[1:])
